- name: ansible to install PyMySQL and Cryptography
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9
# - name: install PyMySQL
#   ansible.builtin.package:
#     name: mysql
#     state: present
- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y
- name: enable nodejs 20 
  ansible.builtin.command: dnf module enable nodejs:20 -y
- name: install nodejs
  ansible.builtin.package:
    name: nodejs
    state: present
- name: expenser user
  ansible.builtin.user:
    name: expense

- name: import tasks from common roles    # define import role, in common folder
  tags:
  - deployment
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

  # - name: create app directory
  #   ansible.builtin.file:
  #     path: /app
  #     state: directory
  # - name: download nodejs/backend code
  #   ansible.builtin.get_url:
  #     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
  #     dest: /tmp/backend.zip
  # - name: unzip backend.zip
  #   ansible.builtin.unarchive:
  #     src: /tmp/backend.zip   # by default it thinks this is in ansible server
  #     dest: /app
  #     remote_src: yes
- name: install dependencies
  tags: 
  - deployment
  ansible.builtin.command:  npm install
  args:
    chdir: /app
- name: copy backend service file
  ansible.builtin.template:           # copy module only works for files without variables
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
    notify: 
    - restart nodejs
- name: import mysql data
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    name: all
    state: import
- name: daemon reload
  tags: 
  - deployment
  ansible.builtin.systemd_service:
    daemon_reload: true
    # name: backend
    # state: restarted